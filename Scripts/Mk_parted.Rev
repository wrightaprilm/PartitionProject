
br_len_lambda ~ dnExp(0.2)
moves.append(mvScale(br_len_lambda, weight=2))


# Set up Gamma-distributed rate variation.
alpha_morpho ~ dnUniform( 0.0, 1E6 )
rates_morpho := fnDiscretizeGamma( alpha_morpho, alpha_morpho, 4 )

# Moves on the parameters to the Gamma distribution.
moves.append( mvScale(alpha_morpho, lambda=1, weight=2.0) )

## Tree definition

phylogeny ~ dnUniformTopologyBranchLength(taxa, branchLengthDistribution=dnExponential(br_len_lambda))
moves.append(mvNNI(phylogeny, weight=n_branches/2.0))
moves.append(mvSPR(phylogeny, weight=n_branches/10.0))
moves.append(mvBranchLengthScale(phylogeny, weight=n_branches))
tree_length := phylogeny.treeLength()

# First, we establish our partitionfinder partitions


i = 1
morpho_bystate[i] <- morpho
# In the below, what we do is make a vector of data partitions in which we have excluded the other partitions.
# This is tricky because you'll need to find some way to get in the number of partitions and which characters
# need to be excluded from which
for (i in number_subsets){
morpho_bystate[i].excludeCharacter(v(2, 5, 6, 8, 9, 10, 11, 17, 19, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 46, 47, 49, 51, 55, 58, 59, 66))
i = i+1
}


n_max_states <- 7
idx = 1
i=1
morpho_bystate[1] <- morpho
for (i in 2:n_max_states) {
    morpho_bystate[i] <- morpho                                # make local tmp copy of data
    morpho_bystate[i].setNumStatesPartition(i)                 # only keep character blocks with state space equal to size i
    nc = morpho_bystate[i].nchar()                             # get number of characters per character size with i-sized states
    if (nc > 0) {
              Q[idx] <- fnJC(i)

      m_morph[idx] ~ dnPhyloCTMC(tree=phylogeny, siteRates=rates_morpho,
                              Q=Q[idx], type="Standard")
      m_morph[idx].clamp(morpho_bystate[i])

      idx = idx + 1                                          # increment counter
      idx
    }
}
