partitions = readDataDelimitedFile("parts.tsv", delimiter = ",")
print("Processing partitioned Script")

br_len_lambda ~ dnExp(0.2)
moves.append(mvScale(br_len_lambda, weight=2))

# Set up Gamma-distributed rate variation.
alpha_morpho ~ dnUniform( 0.0, 1E6 )
rates_morpho := fnDiscretizeGamma( alpha_morpho, alpha_morpho, 4 )

# Moves on the parameters to the Gamma distribution.
moves.append( mvScale(alpha_morpho, lambda=1, weight=2.0) )


## Tree definition

phylogeny ~ dnUniformTopologyBranchLength(taxa, branchLengthDistribution=dnExponential(br_len_lambda))
moves.append(mvNNI(phylogeny, weight=n_branches/2.0))
moves.append(mvSPR(phylogeny, weight=n_branches/10.0))
moves.append(mvBranchLengthScale(phylogeny, weight=n_branches))
tree_length := phylogeny.treeLength()

# First, we establish our partitionfinder partitions

# In the below, what we do is make a vector of data partitions in which we have excluded the other partitions.
# This is tricky because you'll need to find some way to get in the number of partitions and which characters
# need to be excluded from which
x = 1
for (x in 1:partitions.size()){
  morpho_part[x] <- morpho
  morpho_part[x].excludeCharacter(partitions[x])
}

n_max_states <- 10
i=1
idx = 1
for (y in 1:morpho_part.size()){
  morpho_bystate[y] <- morpho_part[y]
  for (i in 2:n_max_states) {
    morpho_bystate[y].setNumStatesPartition(i)                 # only keep character blocks with state space equal to size i

    nc = morpho_bystate[y].nchar()
    nc                         # get number of characters per character size with i-sized states
    if (nc > 0) {
    morpho_bystate[y]
    Q[idx] <- fnJC(i)

      m_morph[idx] ~ dnPhyloCTMC(tree=phylogeny, siteRates=rates_morpho,
                              Q=Q[idx], type="Standard")
      m_morph[idx].clamp(morpho_bystate[y])
      idx = idx + 1
                                   # increment counter
      }
      i = i + 1
    }
      y = y+1
}
