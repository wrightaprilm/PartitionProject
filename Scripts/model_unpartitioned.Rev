###########################################
# Binary morphological substitution model #
###########################################

# Set up branch length moves
br_len_lambda ~ dnExp(0.2)
moves[mvi++] = mvScale(br_len_lambda, weight=5)

for (i in 1:n_branches){
    br_lens[i] ~ dnExponential(br_len_lambda)
    moves[mvi++] = mvScale(br_lens[i]) 
}


#Create a starting tree and place moves on it.
tau ~ dnUniformTopology(taxa)
phylogeny := treeAssembly(tau, br_lens)
moves[mvi++] = mvNNI(tau, weight=2*n_branches)
moves[mvi++] = mvSPR(tau, weight=n_branches)
tree_length := phylogeny.treeLength()

#Combine all of our elements into a CTMC. 

for (i in 1:n_data_subsets){

#Set up Gamma-distributed rate variation.
alpha_morpho[i] ~ dnExponential( 1.0 )
rates_morpho[i] := fnDiscretizeGamma( alpha_morpho[i], alpha_morpho[i], 4 )

#Moves on the parameters to the Gamma distribution.
moves[mvi++] = mvScale(alpha_morpho[i], lambda=0.01, weight=5.0)
moves[mvi++] = mvScale(alpha_morpho[i], lambda=0.1,  weight=3.0)
moves[mvi++] = mvScale(alpha_morpho[i], lambda=1,    weight=1.0)

#Create the Q matrix. 

num_stat = i + 1


Q_morpho[i] := fnJC(num_stat)
phyMorpho[i] ~ dnPhyloCTMC(tree=phylogeny, siteRates=rates_morpho[i], Q=Q_morpho[i], type="Standard")
phyMorpho[i].clamp(data[i])
}

