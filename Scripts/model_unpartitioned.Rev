###########################################
# Binary morphological substitution model #
###########################################

# Set up branch length moves
br_len_lambda ~ dnExp(0.2)
moves[mvi++] = mvScale(br_len_lambda, weight=5)

for (i in 1:n_branches){
    br_lens[i] ~ dnExponential(br_len_lambda)
    moves[mvi++] = mvScale(br_lens[i])
}


#Create a starting tree and place moves on it.
tau ~ dnUniformTopology(taxa)
phylogeny := treeAssembly(tau, br_lens)
moves[mvi++] = mvNNI(tau, weight=2*n_branches)
moves[mvi++] = mvSPR(tau, weight=n_branches)
tree_length := phylogeny.treeLength()

alpha_morpho ~ dnUniform(0, 1E6)
rates_morpho := fnDiscretizeGamma(alpha_morpho, alpha_morpho, 4)
moves[mvi++] = mvScale(alpha_morpho, lambda =1, weight=2)

#Combine all of our elements into a CTMC.
n_max_states <- 7
idx = 1
morpho_bystate[1] <- data


for (i in 1:n_max_states) {
    # make local tmp copy of data
    # only keep character blocks with state space equal to size i
    morpho_bystate[i] <- data 
    morpho_bystate[i].setNumStatesPartition(i)
    morpho_bystate[i]
    morpho_bystate
	# get number of characters per character size wth i-sized states
    nc = morpho_bystate[i].nchar()
    # for non-empty character blocks
    if (nc > 0) {
        # make i-by-i rate matrix
        q[idx] <- fnJC(i)
# create model of evolution for the character block
        m_morph[idx] ~ dnPhyloCTMC( tree=phylogeny,
                                    Q=q[idx],
                                    nSites=nc,
                                    siteRates=rates_morpho,
                                    type="Standard")

        # attach the data
	m_morph[idx].clamp(morpho_bystate[i])
        morpho_bystate[i]
        # increment counter
	idx
	i
	idx = idx + 1
	i = i + 1

}
}
